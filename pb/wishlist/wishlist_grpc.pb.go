// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pb/wishlist.proto

package wishlist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WishlistService_AddToWishlist_FullMethodName      = "/wishlist.wishlistService/AddToWishlist"
	WishlistService_RemoveFromWishlist_FullMethodName = "/wishlist.wishlistService/RemoveFromWishlist"
	WishlistService_ViewWishlist_FullMethodName       = "/wishlist.wishlistService/ViewWishlist"
)

// WishlistServiceClient is the client API for WishlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WishlistServiceClient interface {
	AddToWishlist(ctx context.Context, in *AddToWishlistRequest, opts ...grpc.CallOption) (*AddToWishlistResponse, error)
	RemoveFromWishlist(ctx context.Context, in *RemoveFromWishlistRequest, opts ...grpc.CallOption) (*RemoveFromeWishlistResponse, error)
	ViewWishlist(ctx context.Context, in *ViewWishlistRequset, opts ...grpc.CallOption) (*ViewWishlistResponse, error)
}

type wishlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishlistServiceClient(cc grpc.ClientConnInterface) WishlistServiceClient {
	return &wishlistServiceClient{cc}
}

func (c *wishlistServiceClient) AddToWishlist(ctx context.Context, in *AddToWishlistRequest, opts ...grpc.CallOption) (*AddToWishlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToWishlistResponse)
	err := c.cc.Invoke(ctx, WishlistService_AddToWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) RemoveFromWishlist(ctx context.Context, in *RemoveFromWishlistRequest, opts ...grpc.CallOption) (*RemoveFromeWishlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromeWishlistResponse)
	err := c.cc.Invoke(ctx, WishlistService_RemoveFromWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) ViewWishlist(ctx context.Context, in *ViewWishlistRequset, opts ...grpc.CallOption) (*ViewWishlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewWishlistResponse)
	err := c.cc.Invoke(ctx, WishlistService_ViewWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishlistServiceServer is the server API for WishlistService service.
// All implementations must embed UnimplementedWishlistServiceServer
// for forward compatibility.
type WishlistServiceServer interface {
	AddToWishlist(context.Context, *AddToWishlistRequest) (*AddToWishlistResponse, error)
	RemoveFromWishlist(context.Context, *RemoveFromWishlistRequest) (*RemoveFromeWishlistResponse, error)
	ViewWishlist(context.Context, *ViewWishlistRequset) (*ViewWishlistResponse, error)
	mustEmbedUnimplementedWishlistServiceServer()
}

// UnimplementedWishlistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWishlistServiceServer struct{}

func (UnimplementedWishlistServiceServer) AddToWishlist(context.Context, *AddToWishlistRequest) (*AddToWishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) RemoveFromWishlist(context.Context, *RemoveFromWishlistRequest) (*RemoveFromeWishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) ViewWishlist(context.Context, *ViewWishlistRequset) (*ViewWishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) mustEmbedUnimplementedWishlistServiceServer() {}
func (UnimplementedWishlistServiceServer) testEmbeddedByValue()                         {}

// UnsafeWishlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WishlistServiceServer will
// result in compilation errors.
type UnsafeWishlistServiceServer interface {
	mustEmbedUnimplementedWishlistServiceServer()
}

func RegisterWishlistServiceServer(s grpc.ServiceRegistrar, srv WishlistServiceServer) {
	// If the following call pancis, it indicates UnimplementedWishlistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WishlistService_ServiceDesc, srv)
}

func _WishlistService_AddToWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).AddToWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_AddToWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).AddToWishlist(ctx, req.(*AddToWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_RemoveFromWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).RemoveFromWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_RemoveFromWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).RemoveFromWishlist(ctx, req.(*RemoveFromWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_ViewWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewWishlistRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).ViewWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_ViewWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).ViewWishlist(ctx, req.(*ViewWishlistRequset))
	}
	return interceptor(ctx, in, info, handler)
}

// WishlistService_ServiceDesc is the grpc.ServiceDesc for WishlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WishlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wishlist.wishlistService",
	HandlerType: (*WishlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToWishlist",
			Handler:    _WishlistService_AddToWishlist_Handler,
		},
		{
			MethodName: "RemoveFromWishlist",
			Handler:    _WishlistService_RemoveFromWishlist_Handler,
		},
		{
			MethodName: "ViewWishlist",
			Handler:    _WishlistService_ViewWishlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/wishlist.proto",
}
